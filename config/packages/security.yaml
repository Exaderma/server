security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # patient_login:
        #     pattern: ^/patient/login
        #     stateless: true
        #     provider: patients
        #     json_login:
        #         username_path: email
        #         password_path: password
        #         check_path: /patient/login
        #         success_handler: lexik_jwt_authentication.handler.authentication_success
        #         failure_handler: lexik_jwt_authentication.handler.authentication_failure
        # professional_login:
        #     pattern: ^/professional/login
        #     stateless: true
        #     provider: professionals
        #     json_login:
        #         username_path: email
        #         password_path: password
        #         check_path: /professional/login
        #         success_handler: lexik_jwt_authentication.handler.authentication_success
        #         failure_handler: lexik_jwt_authentication.handler.authentication_failure

            # main:
            #     lazy: true
            #     provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/patient/login, roles: PUBLIC_ACCESS }
        - { path: ^/patient/register, roles: PUBLIC_ACCESS }
        - { path: ^/professional/login, roles: PUBLIC_ACCESS }
        - { path: ^/professional/register, roles: PUBLIC_ACCESS }
        - {path: ^/api/doc, roles: PUBLIC_ACCESS}
        - {path: ^/api/doc.json, roles: PUBLIC_ACCESS}
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
